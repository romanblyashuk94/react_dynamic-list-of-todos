{"version":3,"sources":["types/FilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","TodoList","todos","selectedTodoId","onTodoSelect","className","map","id","title","completed","cn","type","onClick","TodoFilter","memo","selectedFilter","titleFilter","onSelectedFilterChange","onTitleFilterChange","options","Object","entries","value","onChange","event","target","key","optionLabel","toUpperCase","slice","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","todo","onClose","useState","todoOwner","setTodoOwner","useEffect","userId","user","href","email","name","App","setTodos","isLoading","setIsLoading","setSelectedTodoId","NONE","setSelectedFilter","setTitleFilter","todosFromServer","finally","selectedTodo","useMemo","find","visibleTodos","filter","normalizeTodoTitle","toLowerCase","isTitleFilterMatch","includes","ACTIVE","COMPLETED","filterType","titlePart","length","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3e41144.chunk.js","sourcesContent":["export enum FilterType {\n  NONE = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import cn from 'classnames';\nimport { FC } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoId: number,\n  onTodoSelect: (todoId: number) => void,\n};\n\nexport const TodoList: FC<Props> = ({\n  todos,\n  selectedTodoId,\n  onTodoSelect,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(({ id, title, completed }) => (\n        <tr\n          data-cy=\"todo\"\n          className=\"\"\n          key={id}\n        >\n          <td className=\"is-vcentered\">{id}</td>\n          <td className=\"is-vcentered\">\n            {completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={cn({\n                'has-text-success': completed,\n                'has-text-danger': !completed,\n              })}\n            >\n              {title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onTodoSelect(id)}\n            >\n              <span className=\"icon\">\n                <i\n                  // className=\"far fa-eye\"\n                  className={cn(\n                    'far',\n                    { 'fa-eye': id !== selectedTodoId },\n                    { 'fa-eye-slash': id === selectedTodoId },\n                  )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { FC, memo } from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  selectedFilter: FilterType,\n  titleFilter: string,\n  onSelectedFilterChange: (selectedFilterType: FilterType) => void\n  onTitleFilterChange: (titlePart: string) => void\n};\n\nexport const TodoFilter: FC<Props> = memo(({\n  selectedFilter,\n  titleFilter,\n  onSelectedFilterChange,\n  onTitleFilterChange,\n}) => {\n  const options = Object.entries(FilterType);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedFilter}\n            onChange={(event) => {\n              onSelectedFilterChange(event.target.value as FilterType);\n            }}\n          >\n            {options.map(([key, value]) => {\n              const optionLabel = value[0].toUpperCase() + value.slice(1);\n\n              return (\n                <option key={key} value={value}>\n                  {optionLabel}\n                </option>\n              );\n            })}\n\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={titleFilter}\n          onChange={(event) => onTitleFilterChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {titleFilter && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onTitleFilterChange('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo | null,\n  onClose: () => void\n};\n\nexport const TodoModal: FC<Props> = ({ todo, onClose }) => {\n  const [todoOwner, setTodoOwner] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (todo) {\n      getUser(todo.userId)\n        .then(user => {\n          setTodoOwner(user);\n        });\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!todoOwner ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                todo?.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>\n              }\n\n              {' by '}\n\n              <a href={`mailto:${todoOwner.email}`}>\n                {todoOwner.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { FilterType } from './types/FilterType';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [selectedFilter, setSelectedFilter] = useState(FilterType.NONE);\n  const [titleFilter, setTitleFilter] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(todosFromServer => setTodos(todosFromServer))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const selectedTodo = useMemo(() => {\n    return todos.find(({ id }) => id === selectedTodoId) || null;\n  }, [selectedTodoId]);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const normalizeTodoTitle = todo.title.toLowerCase();\n\n      const isTitleFilterMatch = titleFilter\n        ? normalizeTodoTitle.includes(titleFilter.toLowerCase())\n        : true;\n\n      switch (selectedFilter) {\n        case FilterType.ACTIVE:\n          return !todo.completed && isTitleFilterMatch;\n\n        case FilterType.COMPLETED:\n          return todo.completed && isTitleFilterMatch;\n\n        case FilterType.NONE:\n        default:\n          return isTitleFilterMatch;\n      }\n    });\n  }, [selectedFilter, titleFilter, todos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onSelectedFilterChange={(filterType) => setSelectedFilter(filterType)}\n                selectedFilter={selectedFilter}\n                onTitleFilterChange={(titlePart) => setTitleFilter(titlePart)}\n                titleFilter={titleFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {todos.length > 0 && (\n                <TodoList\n                  todos={visibleTodos}\n                  onTodoSelect={(todoId) => setSelectedTodoId(todoId)}\n                  selectedTodoId={selectedTodoId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId && (\n        <TodoModal todo={selectedTodo} onClose={() => setSelectedTodoId(0)} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}